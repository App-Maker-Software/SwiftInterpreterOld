#!/usr/bin/env python
# this will generate the "SwiftInterpreterAutomaticTests.swift" file
# to create new tests, add files underneath CodeTests/MY_TEST_GROUP_NAME/MY_TEST_NAME.swift
from os import listdir
from os.path import isfile, join
import os
import glob
import re

import quick_test
assertDoesNotCompile = quick_test.assertDoesNotCompile
assertMatchingReturnValue = quick_test.assertMatchingReturnValue
assertGlobalMatchingStackValue = quick_test.assertGlobalMatchingStackValue
assertMatchingStackValue = quick_test.assertMatchingStackValue
allTests = quick_test.allTests

class SwiftInterpreterTest(object):
    def __init__(self, name):
        self.name = name
        self.tests = []
        
class SingleTest(object):
    def __init__(self, name, command, body):
        self.name = name
        self.command = command
        self.body = body
        
allSwiftInterpreterTest = []

for potentialFolder in listdir("CodeTests"):
    if not isfile(join("CodeTests", potentialFolder)):
        folderName = potentialFolder
        interpreterTest = SwiftInterpreterTest(name = folderName)
        allSwiftInterpreterTest.append(interpreterTest)
        for potentialSwiftTestFile in listdir(join("CodeTests", folderName)):
            if isfile(join("CodeTests/"+folderName, potentialSwiftTestFile)):
                f = open("CodeTests/"+folderName+"/"+potentialSwiftTestFile, "r")
                fullFile = f.read()
                test_body = re.split(r'\n*[ \t]*\/\/ assert [0-9a-zA-Z\._-]+[ \t]*\n*', fullFile)
                test_command = re.findall(r'\n*[ \t]*\/\/ assert ([0-9a-zA-Z\._-]+)[ \t]*\n*', fullFile)
                shouldCount = len(test_command) > 1
                for i, val in enumerate(test_command):
                    singleTest = SingleTest(
                        name = potentialSwiftTestFile.replace(".swift","") + (str(i+1) if shouldCount else ""),
                        command = test_command[i],
                        body = test_body[i+1]
                    )
                    interpreterTest.tests.append(singleTest)
                f.close()


testList = ""
for test in allSwiftInterpreterTest:
    testList += "        testCase(" + test.name + ".allTests),"

globalTests = []
testClasses = ""
for test in allSwiftInterpreterTest:
    testClasses += "\n\nfinal class " + test.name + ": XCTestCase {"
    for singleTest in test.tests:
        if singleTest.command == "matching_return_value":
            testClasses += "\n\n" + assertMatchingReturnValue(singleTest.name, singleTest.body)
        elif singleTest.command == "does_not_compile":
            testClasses += "\n\n" + assertDoesNotCompile(singleTest.name, singleTest.body)
        elif "global_matching_stack_value_" in singleTest.command:
            stack_value = singleTest.command.replace("global_matching_stack_value_", "")
            values = assertGlobalMatchingStackValue(singleTest.name, stack_value, singleTest.body)
            testClasses += "\n\n" + values[0]
            globalTests.append((singleTest.name, values[1]))
        else:
            stack_value = singleTest.command.replace("matching_stack_value_", "")
            testClasses += "\n\n" + assertMatchingStackValue(singleTest.name, stack_value, singleTest.body)
    testClasses += "\n\n    "+allTests()+"\n"
    testClasses += "}"
    quick_test.testNames = []

fileContents = """//
// THIS FILE IS AUTOMATICALLY GENERATED BY build_automatic_tets.py
// DO NOT EDIT THIS FILE
//

import XCTest
#if canImport(SwiftInterpreterBinary)
import SwiftInterpreterBinary
#else
import SwiftInterpreterSource
#endif

#if !canImport(ObjectiveC)
final class SwiftInterpreterAutomaticTests {
    public static let testCases: [XCTestCaseEntry] = [
""" + testList + """
    ]
}
#endif""" + testClasses

f = open("SwiftInterpreterAutomaticTests.swift", "w")
f.write(fileContents)
f.close()

# delete all global tests
filesUnderFolderSwiftInterpreterAutomaticTests = glob.glob('SwiftInterpreterAutomaticTests/*')
for f in filesUnderFolderSwiftInterpreterAutomaticTests:
    os.remove(f)

# save all global tests
for globalTest in globalTests:
    f = open("SwiftInterpreterAutomaticTests/"+globalTest[0]+"GlobalTest.swift", "w")
    f.write(globalTest[1])
    f.close()


